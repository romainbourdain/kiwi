datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  articles Article[]
  comments Comment[]
  views    View[]
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  User
  Teacher
  Admin
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Article {
  slug      String  @id
  published Boolean @default(false)

  title       String
  description String?
  content     String
  image       String?

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  tags     Tag[]
  views    View[]
  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  slug     String    @id
  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  articles    Article? @relation(fields: [articleSlug], references: [slug], onDelete: Cascade)
  articleSlug String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model View {
  id          Int     @id @default(autoincrement())
  userId      String? // for authenticated users
  articleSlug String
  ip          String? // for unauthenticated users

  article Article @relation(fields: [articleSlug], references: [slug], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Like {
  id        String @id @default(cuid())
  userId    String
  articleId String

  article Article @relation(fields: [articleId], references: [slug], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
